package io.camden.svanish;

import java.util.HashMap;
import java.util.Map;

import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.craftbukkit.v1_8_R3.entity.CraftPlayer;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.permissions.Permission;
import org.bukkit.plugin.java.JavaPlugin;

import net.minecraft.server.v1_8_R3.IChatBaseComponent.ChatSerializer;
import net.minecraft.server.v1_8_R3.PacketPlayOutChat;

public class Main extends JavaPlugin implements Listener {

	/**
	 * @author Diego
	 */
	
	/*
	 * A Map(or a hashmap) is a variable that stores data in a key and value.
	 * For example, you can get the value of a player in a map and it will return a 'Boolean' object, as defined below.
	 * Boolean is a simple for of data, taking up only 1 bit(at least the last time I checked). It is either true or false, like an enumeration value.
	 */
	private Map<Player, Boolean> vanish = new HashMap<Player, Boolean>();
	
	// This is creating a new instance of the Permission class which essentially just stores a string.
	private Permission vanishPerm = new Permission("svanish.vanish");
	
	public void onEnable() {
		Bukkit.getPluginManager().registerEvents(this, this);
		// This code just prevents NullPointerException's.
		for (Player p : Bukkit.getOnlinePlayers()) {
			// Note: This is how you put data into a map/hashmap.
			vanish.put(p, false);
		}
	}
	
	// This event just sets it so that the default values is vanish off.
	@EventHandler
	public void onPlayerJoin(PlayerJoinEvent e) {
		vanish.put(e.getPlayer(), false);
		for (Player p : Bukkit.getOnlinePlayers()) {
			// This is hard to explain, I will not comment on this.
			if (p == e.getPlayer()) {
				continue;
			} else if (vanish.get(p)) {
				for (Player all : Bukkit.getOnlinePlayers()) {
					if (all == p) {
						continue;
					} else {
						all.hidePlayer(p);
					}
				}
			}
		}
	}

	// Overriding the method in the JavaPlugin class, and this method is activated when a player does any command.
	public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {
		// Getting the command name. You can also use: cmd.getName().equalsIgnoreCase() . These methods return a boolean which the if statement uses
		// to figure out wether or not to execute this command.
		/*
		 * Another Use:
		 * if (label.equalsIgnoreCase("vanish") == true) {
		 * }
		 */
		if (label.equalsIgnoreCase("vanish")) {
			// Doesn't allow console to use this command.
			if (!(sender instanceof Player)) {
				sender.sendMessage("§cYou Must Be A Player To Execute That Command!");
				return false;
			}
			/* Casting from the interface 'Player', and casting it to the interface CommandSender.
			* CommandSender is an interface which if you implement it, forces you to use its abstract methods.
			* It is possible to cast CommandSender to Player because Player extends CommandSender, that is it is a safe cast.
			*/
			Player p = (Player) sender;
			/*
			 *  the 'args' variable is an array of strings which is generated by when this method is triggered. For example, args if the player did the command:
			 *  /vanish Me hello
			 *  the args index of (0) would be equal to "Me", and args index of (1) would be equal to "hello"
			 *  These indexes of the args variable can be accessed using square brackets like this:
			 *  args[INDEX] 
			 */
			/*
			 * Now we are using a method from the 'Player' interface which is not in the CommandSender interface, but is in the 'Player' interface.
			 * The ! means not.
			 * hasPermission is self-explanatory, it detects wether the player has permission, provided by the 'sender' variable to determine the outcome.
			 */
			if (!p.hasPermission(vanishPerm)) {
				sender.sendMessage("§cYou Don't Have Enough Permissions To Execute That Command!");
				// This part is simple, we are just returning out of this method with a value of false, which is not used by the JavaPlugin class, and is still
				// unknown why the dev team at CraftBukkit decided to use a return value instead of void(the return value of nothing, not null as my friend mistaked).
				return false;
			}
			// the function 'args.length' is built into the java language(which is why it's blue) and counts the amount of indexes in the args array.
			// If you take a look at another use of the "label.equalsIgnoreCase," you can see that you have option double equal symbols.
			// != is the same as equals, but in inverse, meaning I can also do this:
			/*
			 * if (!(args.length == 0)) {
			 * }
			 * This is just an easier way of writing it.
			 */
			if (args.length != 0) {
				// We are using the instance of our "sender" variable that was casted to player using a safe cast.
				// sendMessage is also in the CommandSender interface, so that is why we used the 'sender' variable and not the 'p' variable, which is safe casted already.
				sender.sendMessage("§cInvalid arguements.");
				return false;
			}
			
			// This is creating a packet to send to the player, which is many, many bytes.
			// The ChatSerializer.a(); method turns JSON code into an IChatBaseComponent.
			// (byte) 2 is casting the type #2 of chat to a byte that can be converted in a packet. The use of an enumeration would take up too much data in the packet.
			PacketPlayOutChat packet;
			if (vanish.get(p))
				packet = new PacketPlayOutChat(ChatSerializer.a("{\"text\":\"§fYou Are Currently §cUNVANISHED\"}"), (byte) 2);
			else
				packet = new PacketPlayOutChat(ChatSerializer.a("{\"text\":\"§fYou Are Currently §cVANISHED\"}"), (byte) 2);
			// Now again, we are casting from a Player to a CraftPlayer, which contains more methods than just the 'Player'interface. CraftPlayer is a class.
			CraftPlayer player = (CraftPlayer) p;
			// now we are actually sending the real packet that will be sent to the player, which is the PacketPlayOutChat packet.
			player.getHandle().playerConnection.sendPacket(packet);
			if (vanish.get(p)) {
				for (Player all : Bukkit.getOnlinePlayers()) {
					if (all == p) {
						continue;
					} else {
						all.showPlayer(p);
					}
				}
				vanish.put(p, false);
			} else {
				for (Player all : Bukkit.getOnlinePlayers()) {
					if (all == p) {
						continue;
					} else {
						all.hidePlayer(p);
					}
				}
				vanish.put(p, true);
			}
		}
		return false;
		
	}
	
}
